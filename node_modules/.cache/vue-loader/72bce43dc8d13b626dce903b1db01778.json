{"remainingRequest":"/Users/artem/Desktop/Bank/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/artem/Desktop/Bank/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/artem/Desktop/Bank/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/artem/Desktop/Bank/src/views/Home.vue?vue&type=template&id=fae5bece&scoped=true&","dependencies":[{"path":"/Users/artem/Desktop/Bank/src/views/Home.vue","mtime":1582748901903},{"path":"/Users/artem/Desktop/Bank/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/artem/Desktop/Bank/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/artem/Desktop/Bank/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/artem/Desktop/Bank/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("div", { staticClass: "page page_two" }, [
    _c("div", { staticClass: "top" }, [
      _c("div", { staticClass: "container" }, [
        _c("div", { staticClass: "top__row" }, [
          _vm._m(0),
          _c("div", { staticClass: "top__rate" }, [
            _c("div", { staticClass: "top__rate_item" }, [
              _c("div", { staticClass: "top__rate_name" }, [_vm._v("GOLD")]),
              _c("div", { staticClass: "top__rate_value top__rate_up" }, [
                _c("span", [_vm._v("1415,50")]),
                _c("i", [
                  _c(
                    "svg",
                    {
                      staticClass: "ico_svg",
                      attrs: {
                        viewBox: "0 0 10 12",
                        xmlns: "http://www.w3.org/2000/svg"
                      }
                    },
                    [
                      _c("use", {
                        attrs: {
                          "xlink:href": "img/sprite_icons.svg#icon__arrow_up",
                          "xmlns:xlink": "http://www.w3.org/1999/xlink"
                        }
                      })
                    ]
                  )
                ])
              ])
            ]),
            _c("div", { staticClass: "top__rate_item" }, [
              _c("div", { staticClass: "top__rate_name" }, [_vm._v("EURUSD")]),
              _c("div", { staticClass: "top__rate_value top__rate_up" }, [
                _c("span", [_vm._v("1,101241")]),
                _c("i", [
                  _c(
                    "svg",
                    {
                      staticClass: "ico_svg",
                      attrs: {
                        viewBox: "0 0 10 12",
                        xmlns: "http://www.w3.org/2000/svg"
                      }
                    },
                    [
                      _c("use", {
                        attrs: {
                          "xlink:href": "img/sprite_icons.svg#icon__arrow_up",
                          "xmlns:xlink": "http://www.w3.org/1999/xlink"
                        }
                      })
                    ]
                  )
                ])
              ])
            ]),
            _c("div", { staticClass: "top__rate_item" }, [
              _c("div", { staticClass: "top__rate_name" }, [_vm._v("GBPUSD")]),
              _c("div", { staticClass: "top__rate_value top__rate_down" }, [
                _c("span", [_vm._v("1,28418")]),
                _c("i", [
                  _c(
                    "svg",
                    {
                      staticClass: "ico_svg",
                      attrs: {
                        viewBox: "0 0 10 12",
                        xmlns: "http://www.w3.org/2000/svg"
                      }
                    },
                    [
                      _c("use", {
                        attrs: {
                          "xlink:href": "img/sprite_icons.svg#icon__arrow_down",
                          "xmlns:xlink": "http://www.w3.org/1999/xlink"
                        }
                      })
                    ]
                  )
                ])
              ])
            ]),
            _c("div", { staticClass: "top__rate_item" }, [
              _c("div", { staticClass: "top__rate_name" }, [_vm._v("EURUSD")]),
              _c("div", { staticClass: "top__rate_value top__rate_up" }, [
                _c("span", [_vm._v("1,101241")]),
                _c("i", [
                  _c(
                    "svg",
                    {
                      staticClass: "ico_svg",
                      attrs: {
                        viewBox: "0 0 10 12",
                        xmlns: "http://www.w3.org/2000/svg"
                      }
                    },
                    [
                      _c("use", {
                        attrs: {
                          "xlink:href": "img/sprite_icons.svg#icon__arrow_up",
                          "xmlns:xlink": "http://www.w3.org/1999/xlink"
                        }
                      })
                    ]
                  )
                ])
              ])
            ]),
            _c("div", { staticClass: "top__rate_item" }, [
              _c("div", { staticClass: "top__rate_name" }, [_vm._v("GBPUSD")]),
              _c("div", { staticClass: "top__rate_value top__rate_down" }, [
                _c("span", [_vm._v("1,28418")]),
                _c("i", [
                  _c(
                    "svg",
                    {
                      staticClass: "ico_svg",
                      attrs: {
                        viewBox: "0 0 10 12",
                        xmlns: "http://www.w3.org/2000/svg"
                      }
                    },
                    [
                      _c("use", {
                        attrs: {
                          "xlink:href": "img/sprite_icons.svg#icon__arrow_down",
                          "xmlns:xlink": "http://www.w3.org/1999/xlink"
                        }
                      })
                    ]
                  )
                ])
              ])
            ])
          ]),
          _c("div", { staticClass: "top__content" }, [
            _c("div", { staticClass: "lng" }, [
              _c("div", { staticClass: "lng__active" }, [
                _c("div", { staticClass: "lng__active_icon" }, [
                  _c(
                    "svg",
                    {
                      staticClass: "ico_svg",
                      attrs: {
                        viewBox: "0 0 12 12",
                        xmlns: "http://www.w3.org/2000/svg"
                      }
                    },
                    [
                      _c("use", {
                        attrs: {
                          "xlink:href": "img/sprite_icons.svg#icon__global",
                          "xmlns:xlink": "http://www.w3.org/1999/xlink"
                        }
                      })
                    ]
                  )
                ]),
                _c("div", { staticClass: "lng__active_name" }, [_vm._v("Ru")]),
                _c("div", { staticClass: "lng__active_arrow" }, [
                  _c(
                    "svg",
                    {
                      staticClass: "ico_svg",
                      attrs: {
                        viewBox: "0 0 14 9",
                        xmlns: "http://www.w3.org/2000/svg"
                      }
                    },
                    [
                      _c("use", {
                        attrs: {
                          "xlink:href": "img/sprite_icons.svg#icon__shape",
                          "xmlns:xlink": "http://www.w3.org/1999/xlink"
                        }
                      })
                    ]
                  )
                ])
              ]),
              _vm._m(1)
            ]),
            _vm._m(2),
            _vm._m(3)
          ])
        ])
      ])
    ]),
    _c("header", { staticClass: "header" }, [
      _c("div", { staticClass: "container" }, [
        _c("div", { staticClass: "header__row" }, [
          _vm._m(4),
          _c("nav", { staticClass: "nav" }, [
            _c("span", { staticClass: "nav__close nav_toggle" }),
            _c("ul", { staticClass: "nav__menu" }, [
              _c("li", [
                _c("a", { attrs: { href: "#" } }, [
                  _c("span", [_vm._v("Прогнозы")]),
                  _c("i", [
                    _c(
                      "svg",
                      {
                        staticClass: "ico_svg",
                        attrs: {
                          viewBox: "0 0 14 9",
                          xmlns: "http://www.w3.org/2000/svg"
                        }
                      },
                      [
                        _c("use", {
                          attrs: {
                            "xlink:href": "img/sprite_icons.svg#icon__shape",
                            "xmlns:xlink": "http://www.w3.org/1999/xlink"
                          }
                        })
                      ]
                    )
                  ])
                ]),
                _vm._m(5)
              ]),
              _vm._m(6),
              _c("li", [
                _c("a", { attrs: { href: "#" } }, [
                  _c("span", [_vm._v("Роботы")]),
                  _c("i", [
                    _c(
                      "svg",
                      {
                        staticClass: "ico_svg",
                        attrs: {
                          viewBox: "0 0 14 9",
                          xmlns: "http://www.w3.org/2000/svg"
                        }
                      },
                      [
                        _c("use", {
                          attrs: {
                            "xlink:href": "img/sprite_icons.svg#icon__shape",
                            "xmlns:xlink": "http://www.w3.org/1999/xlink"
                          }
                        })
                      ]
                    )
                  ])
                ]),
                _vm._m(7)
              ]),
              _vm._m(8),
              _vm._m(9),
              _c("li", [
                _c("a", { staticClass: "nav_blue", attrs: { href: "#" } }, [
                  _c("span", [_vm._v("Для Аналитиков")]),
                  _c("i", [
                    _c(
                      "svg",
                      {
                        staticClass: "ico_svg",
                        attrs: {
                          viewBox: "0 0 9 6",
                          xmlns: "http://www.w3.org/2000/svg"
                        }
                      },
                      [
                        _c("use", {
                          attrs: {
                            "xlink:href": "img/sprite_icons.svg#icon__shape",
                            "xmlns:xlink": "http://www.w3.org/1999/xlink"
                          }
                        })
                      ]
                    )
                  ]),
                  _c("b", [_vm._v("99")])
                ]),
                _vm._m(10)
              ])
            ])
          ]),
          _c("div", { staticClass: "nav__layout nav_toggle" }),
          _c("div", { staticClass: "header__auth" }, [
            _c("div", { staticClass: "user" }, [
              _c("div", { staticClass: "user__label" }, [
                _c("span", [_vm._v("Иван Иванов")]),
                _c("i", [
                  _c(
                    "svg",
                    {
                      staticClass: "ico_svg",
                      attrs: {
                        viewBox: "0 0 16 16",
                        xmlns: "http://www.w3.org/2000/svg"
                      }
                    },
                    [
                      _c("use", {
                        attrs: {
                          "xlink:href": "img/sprite_icons.svg#icon__bell",
                          "xmlns:xlink": "http://www.w3.org/1999/xlink"
                        }
                      })
                    ]
                  )
                ])
              ]),
              _vm._m(11)
            ])
          ])
        ])
      ])
    ]),
    _c("section", { staticClass: "main" }, [
      _c("div", { staticClass: "container" }, [
        _vm._m(12),
        _c("div", { staticClass: "profile" }, [
          _c("div", { staticClass: "profile__header" }, [
            _c("div", { staticClass: "profile__header_content" }, [
              _c("div", { staticClass: "profile__header_title" }, [
                _vm._v(_vm._s(_vm.$store.getters.getInfo.user.username))
              ]),
              _c("div", { staticClass: "profile__header_meta" }, [
                _c("div", {
                  staticClass: "raty",
                  attrs: { "data-readOnly": "true", "data-score": "4" }
                }),
                _c("span", [
                  _vm._v(_vm._s(_vm.$store.getters.getInfo.user.last_login_at))
                ])
              ])
            ]),
            _vm._m(13)
          ]),
          _c("div", { staticClass: "profile__body" }, [
            _c("div", { staticClass: "profile__title" }, [
              _vm._v("Персональные данные")
            ]),
            _c("div", { staticClass: "profile__row" }, [
              _c("div", { staticClass: "profile__col profile__col_one" }, [
                _c("div", { staticClass: "profile__item" }, [
                  _c("div", { staticClass: "profile__item_label" }, [
                    _vm._v("ID")
                  ]),
                  _c("div", { staticClass: "profile__item_text" }, [
                    _vm._v(_vm._s(_vm.$store.getters.getInfo.user.id))
                  ])
                ]),
                _c("div", { staticClass: "profile__item" }, [
                  _c("div", { staticClass: "profile__item_label" }, [
                    _vm._v("Ф.И.О.")
                  ]),
                  _c("div", { staticClass: "profile__item_text" }, [
                    _vm._v(
                      _vm._s(_vm.$store.getters.getInfo.user.name) +
                        " " +
                        _vm._s(_vm.$store.getters.getInfo.user.lastname) +
                        " " +
                        _vm._s(_vm.$store.getters.getInfo.user.lastname2)
                    )
                  ])
                ]),
                _c("div", { staticClass: "profile__item" }, [
                  _c("div", { staticClass: "profile__item_label" }, [
                    _vm._v("E-mail")
                  ]),
                  _c("div", { staticClass: "profile__item_text" }, [
                    _vm._v(_vm._s(_vm.$store.getters.getInfo.user.email))
                  ])
                ]),
                _c("div", { staticClass: "profile__item" }, [
                  _c("div", { staticClass: "profile__item_label" }, [
                    _vm._v("Телефон")
                  ]),
                  _c("div", { staticClass: "profile__item_text" }, [
                    _vm._v(_vm._s(_vm.$store.getters.getInfo.user.phone))
                  ])
                ])
              ]),
              _c("div", { staticClass: "profile__col profile__col_two" }, [
                _c("div", { staticClass: "profile__item" }, [
                  _c("div", { staticClass: "profile__item_label" }, [
                    _vm._v("Возраст")
                  ]),
                  _vm.$store.getters.getInfo.birthday
                    ? _c("div", { staticClass: "profile__item_text" }, [
                        _vm._v(_vm._s(_vm.$store.getters.getInfo.birthday))
                      ])
                    : _vm._e()
                ]),
                _c("div", { staticClass: "profile__item" }, [
                  _c("div", { staticClass: "profile__item_label" }, [
                    _vm._v("Пол")
                  ]),
                  (_vm.$store.getters.getInfo.sex = "m")
                    ? _c("div", { staticClass: "profile__item_text" }, [
                        _vm._v("Мужской")
                      ])
                    : _c("div", { staticClass: "profile__item_text" }, [
                        _vm._v("Женский")
                      ])
                ]),
                _c("div", { staticClass: "profile__item" }, [
                  _c("div", { staticClass: "profile__item_label" }, [
                    _vm._v("Страна")
                  ]),
                  _c("div", { staticClass: "profile__item_text" }, [
                    _vm._v(_vm._s(_vm.$store.getters.getInfo.country))
                  ])
                ]),
                _c("div", { staticClass: "profile__item" }, [
                  _c("div", { staticClass: "profile__item_label" }, [
                    _vm._v("Город")
                  ]),
                  _c("div", { staticClass: "profile__item_text" }, [
                    _vm._v(_vm._s(_vm.$store.getters.getInfo.city))
                  ])
                ])
              ]),
              _c("div", { staticClass: "profile__col profile__col_three" }, [
                _c("div", { staticClass: "profile__item" }, [
                  _c("div", { staticClass: "profile__item_label" }, [
                    _vm._v("Дата регистрации")
                  ]),
                  _c("div", { staticClass: "profile__item_text" }, [
                    _vm._v(_vm._s(_vm.$store.getters.getInfo.user.created_at))
                  ])
                ]),
                _vm._m(14),
                _c("div", { staticClass: "profile__item" }, [
                  _c("div", { staticClass: "profile__item_label" }, [
                    _vm._v("Дипломы и сертификаты аналитика")
                  ]),
                  _c("div", { staticClass: "profile__item_text" }, [
                    _vm._v(
                      _vm._s(_vm.$store.getters.getInfo.certificates) + " "
                    )
                  ])
                ])
              ]),
              _c("div", { staticClass: "profile__col profile__col_four" }, [
                _c("div", { staticClass: "profile__item" }, [
                  _c("div", { staticClass: "profile__item_label" }, [
                    _vm._v("Общее количество прогнозов")
                  ]),
                  _c("div", { staticClass: "profile__item_text" }, [
                    _vm._v(_vm._s(_vm.$store.getters.getInfo.forecast_total))
                  ])
                ]),
                _c("div", { staticClass: "profile__item" }, [
                  _c("div", { staticClass: "profile__item_label" }, [
                    _vm._v("Количество подписчиков на аналитику")
                  ]),
                  _c("div", { staticClass: "profile__item_text" }, [
                    _vm._v(_vm._s(_vm.$store.getters.getInfo.subscrubers))
                  ])
                ]),
                _c("div", { staticClass: "profile__item" }, [
                  _c("div", { staticClass: "profile__item_label" }, [
                    _vm._v("Методы анализа рынка")
                  ]),
                  _c("div", { staticClass: "profile__item_text" }, [
                    _vm._v(
                      _vm._s(_vm.$store.getters.getInfo.trademethods) + " "
                    )
                  ])
                ])
              ])
            ])
          ])
        ]),
        _c("div", { staticClass: "box" }, [
          _vm._m(15),
          _c("div", { staticClass: "box__content" }, [
            _c(
              "div",
              { staticClass: "table_responsive table_responsive_lg  mb_35" },
              [
                _c("table", { staticClass: "table table_compact" }, [
                  _vm._m(16),
                  _c("tbody", [
                    _c("tr", [
                      _c("td", [_vm._v("Сегодня 10:30")]),
                      _c("td", { staticClass: "text_center" }, [
                        _vm._v("ММББ")
                      ]),
                      _vm._m(17),
                      _vm._m(18),
                      _c("td", { staticClass: "text_center" }, [_vm._v("120")]),
                      _c("td", { staticClass: "text_center" }, [_vm._v("**")]),
                      _c("td", { staticClass: "text_center" }, [
                        _vm._v("25 дек 2018")
                      ]),
                      _vm._m(19),
                      _c("td", [
                        _c("div", { staticClass: "info_link" }, [
                          _c("div", { staticClass: "info_link__item" }, [
                            _c(
                              "svg",
                              {
                                staticClass: "ico_svg",
                                attrs: {
                                  viewBox: "0 0 20 18",
                                  xmlns: "http://www.w3.org/2000/svg"
                                }
                              },
                              [
                                _c("use", {
                                  attrs: {
                                    "xlink:href":
                                      "img/sprite_icons.svg#icon__comments",
                                    "xmlns:xlink":
                                      "http://www.w3.org/1999/xlink"
                                  }
                                })
                              ]
                            )
                          ]),
                          _vm._m(20)
                        ])
                      ])
                    ]),
                    _c("tr", [
                      _c("td", [_vm._v("Сегодня 10:30")]),
                      _c("td", { staticClass: "text_center" }, [
                        _vm._v("ММББ")
                      ]),
                      _vm._m(21),
                      _c("td", { staticClass: "text_center" }, [_vm._v("35")]),
                      _c("td", { staticClass: "text_center" }, [_vm._v("120")]),
                      _c("td", { staticClass: "text_center" }, [_vm._v("***")]),
                      _c("td", { staticClass: "text_center" }, [
                        _vm._v("30 дек 2018")
                      ]),
                      _vm._m(22),
                      _c("td", [
                        _c("div", { staticClass: "info_link" }, [
                          _c("div", { staticClass: "info_link__item" }, [
                            _c(
                              "svg",
                              {
                                staticClass: "ico_svg",
                                attrs: {
                                  viewBox: "0 0 20 18",
                                  xmlns: "http://www.w3.org/2000/svg"
                                }
                              },
                              [
                                _c("use", {
                                  attrs: {
                                    "xlink:href":
                                      "img/sprite_icons.svg#icon__comments",
                                    "xmlns:xlink":
                                      "http://www.w3.org/1999/xlink"
                                  }
                                })
                              ]
                            )
                          ]),
                          _vm._m(23)
                        ])
                      ])
                    ]),
                    _c("tr", [
                      _c("td", [_vm._v("Сегодня 10:30")]),
                      _c("td", { staticClass: "text_center" }, [
                        _vm._v("ММББ")
                      ]),
                      _vm._m(24),
                      _vm._m(25),
                      _c("td", { staticClass: "text_center" }, [_vm._v("120")]),
                      _c("td", { staticClass: "text_center" }, [_vm._v("**")]),
                      _c("td", { staticClass: "text_center" }, [
                        _vm._v("25 дек 2018")
                      ]),
                      _vm._m(26),
                      _c("td", [
                        _c("div", { staticClass: "info_link" }, [
                          _c("div", { staticClass: "info_link__item" }, [
                            _c(
                              "svg",
                              {
                                staticClass: "ico_svg",
                                attrs: {
                                  viewBox: "0 0 20 18",
                                  xmlns: "http://www.w3.org/2000/svg"
                                }
                              },
                              [
                                _c("use", {
                                  attrs: {
                                    "xlink:href":
                                      "img/sprite_icons.svg#icon__comments",
                                    "xmlns:xlink":
                                      "http://www.w3.org/1999/xlink"
                                  }
                                })
                              ]
                            )
                          ]),
                          _vm._m(27)
                        ])
                      ])
                    ]),
                    _c("tr", [
                      _c("td", [_vm._v("Сегодня 10:30")]),
                      _c("td", { staticClass: "text_center" }, [
                        _vm._v("ММББ")
                      ]),
                      _vm._m(28),
                      _vm._m(29),
                      _c("td", { staticClass: "text_center" }, [_vm._v("120")]),
                      _c("td", { staticClass: "text_center" }, [_vm._v("***")]),
                      _c("td", { staticClass: "text_center" }, [
                        _vm._v("30 дек 2018")
                      ]),
                      _vm._m(30),
                      _c("td", [
                        _c("div", { staticClass: "info_link" }, [
                          _c("div", { staticClass: "info_link__item" }, [
                            _c(
                              "svg",
                              {
                                staticClass: "ico_svg",
                                attrs: {
                                  viewBox: "0 0 20 18",
                                  xmlns: "http://www.w3.org/2000/svg"
                                }
                              },
                              [
                                _c("use", {
                                  attrs: {
                                    "xlink:href":
                                      "img/sprite_icons.svg#icon__comments",
                                    "xmlns:xlink":
                                      "http://www.w3.org/1999/xlink"
                                  }
                                })
                              ]
                            )
                          ]),
                          _vm._m(31)
                        ])
                      ])
                    ]),
                    _c("tr", [
                      _c("td", [_vm._v("Сегодня 10:30")]),
                      _c("td", { staticClass: "text_center" }, [
                        _vm._v("ММББ")
                      ]),
                      _vm._m(32),
                      _vm._m(33),
                      _c("td", { staticClass: "text_center" }, [_vm._v("120")]),
                      _c("td", { staticClass: "text_center" }, [_vm._v("**")]),
                      _c("td", { staticClass: "text_center" }, [
                        _vm._v("25 дек 2018")
                      ]),
                      _vm._m(34),
                      _c("td", [
                        _c("div", { staticClass: "info_link" }, [
                          _c("div", { staticClass: "info_link__item" }, [
                            _c(
                              "svg",
                              {
                                staticClass: "ico_svg",
                                attrs: {
                                  viewBox: "0 0 20 18",
                                  xmlns: "http://www.w3.org/2000/svg"
                                }
                              },
                              [
                                _c("use", {
                                  attrs: {
                                    "xlink:href":
                                      "img/sprite_icons.svg#icon__comments",
                                    "xmlns:xlink":
                                      "http://www.w3.org/1999/xlink"
                                  }
                                })
                              ]
                            )
                          ]),
                          _vm._m(35)
                        ])
                      ])
                    ]),
                    _c("tr", [
                      _c("td", [_vm._v("Сегодня 10:30")]),
                      _c("td", { staticClass: "text_center" }, [
                        _vm._v("ММББ")
                      ]),
                      _vm._m(36),
                      _vm._m(37),
                      _c("td", { staticClass: "text_center" }, [_vm._v("120")]),
                      _c("td", { staticClass: "text_center" }, [_vm._v("***")]),
                      _c("td", { staticClass: "text_center" }, [
                        _vm._v("30 дек 2018")
                      ]),
                      _vm._m(38),
                      _c("td", [
                        _c("div", { staticClass: "info_link" }, [
                          _c("div", { staticClass: "info_link__item" }, [
                            _c(
                              "svg",
                              {
                                staticClass: "ico_svg",
                                attrs: {
                                  viewBox: "0 0 20 18",
                                  xmlns: "http://www.w3.org/2000/svg"
                                }
                              },
                              [
                                _c("use", {
                                  attrs: {
                                    "xlink:href":
                                      "img/sprite_icons.svg#icon__comments",
                                    "xmlns:xlink":
                                      "http://www.w3.org/1999/xlink"
                                  }
                                })
                              ]
                            )
                          ]),
                          _vm._m(39)
                        ])
                      ])
                    ])
                  ])
                ])
              ]
            ),
            _vm._m(40),
            _c("div", { staticClass: "box__view" }, [
              _c(
                "button",
                {
                  staticClass: "btn btn_arrow_down",
                  attrs: { type: "button" }
                },
                [
                  _c("span", [_vm._v("Посмотреть ещё")]),
                  _c("i", [
                    _c(
                      "svg",
                      {
                        staticClass: "ico_svg",
                        attrs: {
                          viewBox: "0 0 16 16",
                          xmlns: "http://www.w3.org/2000/svg"
                        }
                      },
                      [
                        _c("use", {
                          attrs: {
                            "xlink:href": "img/sprite_icons.svg#icon__reload",
                            "xmlns:xlink": "http://www.w3.org/1999/xlink"
                          }
                        })
                      ]
                    )
                  ])
                ]
              )
            ])
          ])
        ]),
        _c("div", { staticClass: "box" }, [
          _vm._m(41),
          _c("div", { staticClass: "box__content" }, [
            _c(
              "div",
              { staticClass: "table_responsive table_responsive_lg mb_35" },
              [
                _c("table", { staticClass: "table table_compact" }, [
                  _vm._m(42),
                  _c("tbody", [
                    _c("tr", [
                      _c("td", [_vm._v("Сегодня 10:30")]),
                      _c("td", { staticClass: "text_center" }, [
                        _vm._v("Сегодня 10:30")
                      ]),
                      _vm._m(43),
                      _vm._m(44),
                      _c("td", { staticClass: "text_center" }, [_vm._v("3")]),
                      _c("td", { staticClass: "text_center" }, [_vm._v("120")]),
                      _vm._m(45),
                      _c("td", [
                        _c("div", { staticClass: "info_link" }, [
                          _c("div", { staticClass: "info_link__item" }, [
                            _c(
                              "svg",
                              {
                                staticClass: "ico_svg",
                                attrs: {
                                  viewBox: "0 0 20 18",
                                  xmlns: "http://www.w3.org/2000/svg"
                                }
                              },
                              [
                                _c("use", {
                                  attrs: {
                                    "xlink:href":
                                      "img/sprite_icons.svg#icon__comments",
                                    "xmlns:xlink":
                                      "http://www.w3.org/1999/xlink"
                                  }
                                })
                              ]
                            )
                          ]),
                          _vm._m(46)
                        ])
                      ])
                    ]),
                    _c("tr", [
                      _c("td", [_vm._v("Сегодня 10:30")]),
                      _c("td", { staticClass: "text_center" }, [
                        _vm._v("Сегодня 10:30")
                      ]),
                      _vm._m(47),
                      _vm._m(48),
                      _c("td", { staticClass: "text_center" }, [_vm._v("3")]),
                      _c("td", { staticClass: "text_center" }, [_vm._v("120")]),
                      _vm._m(49),
                      _c("td", [
                        _c("div", { staticClass: "info_link" }, [
                          _c("div", { staticClass: "info_link__item" }, [
                            _c(
                              "svg",
                              {
                                staticClass: "ico_svg",
                                attrs: {
                                  viewBox: "0 0 20 18",
                                  xmlns: "http://www.w3.org/2000/svg"
                                }
                              },
                              [
                                _c("use", {
                                  attrs: {
                                    "xlink:href":
                                      "img/sprite_icons.svg#icon__comments",
                                    "xmlns:xlink":
                                      "http://www.w3.org/1999/xlink"
                                  }
                                })
                              ]
                            )
                          ]),
                          _vm._m(50)
                        ])
                      ])
                    ])
                  ])
                ])
              ]
            ),
            _vm._m(51),
            _c("div", { staticClass: "box__view" }, [
              _c(
                "button",
                {
                  staticClass: "btn btn_arrow_down",
                  attrs: { type: "button" }
                },
                [
                  _c("span", [_vm._v("Посмотреть ещё")]),
                  _c("i", [
                    _c(
                      "svg",
                      {
                        staticClass: "ico_svg",
                        attrs: {
                          viewBox: "0 0 16 16",
                          xmlns: "http://www.w3.org/2000/svg"
                        }
                      },
                      [
                        _c("use", {
                          attrs: {
                            "xlink:href": "img/sprite_icons.svg#icon__reload",
                            "xmlns:xlink": "http://www.w3.org/1999/xlink"
                          }
                        })
                      ]
                    )
                  ])
                ]
              )
            ])
          ])
        ]),
        _vm._m(52),
        _c("div", { staticClass: "box" }, [
          _vm._m(53),
          _c("div", { staticClass: "box__content" }, [
            _c("div", { staticClass: "filter mb_15" }, [
              _c("div", { staticClass: "filter__row" }, [
                _c("div", { staticClass: "filter__item filter__item_xs" }, [
                  _c("div", { staticClass: "select" }, [
                    _c("input", {
                      attrs: { type: "hidden", name: "select", value: "" }
                    }),
                    _c("div", { staticClass: "select__label" }, [
                      _c("span", [_vm._v("Рынок")]),
                      _c("i", [
                        _c(
                          "svg",
                          {
                            staticClass: "ico_svg",
                            attrs: {
                              viewBox: "0 0 14 9",
                              xmlns: "http://www.w3.org/2000/svg"
                            }
                          },
                          [
                            _c("use", {
                              attrs: {
                                "xlink:href":
                                  "img/sprite_icons.svg#icon__shape",
                                "xmlns:xlink": "http://www.w3.org/1999/xlink"
                              }
                            })
                          ]
                        )
                      ])
                    ]),
                    _vm._m(54)
                  ])
                ]),
                _c("div", { staticClass: "filter__item filter__item_xs" }, [
                  _c("div", { staticClass: "select" }, [
                    _c("input", {
                      attrs: { type: "hidden", name: "select", value: "" }
                    }),
                    _c("div", { staticClass: "select__label" }, [
                      _c("span", [_vm._v("Биржа")]),
                      _c("i", [
                        _c(
                          "svg",
                          {
                            staticClass: "ico_svg",
                            attrs: {
                              viewBox: "0 0 14 9",
                              xmlns: "http://www.w3.org/2000/svg"
                            }
                          },
                          [
                            _c("use", {
                              attrs: {
                                "xlink:href":
                                  "img/sprite_icons.svg#icon__shape",
                                "xmlns:xlink": "http://www.w3.org/1999/xlink"
                              }
                            })
                          ]
                        )
                      ])
                    ]),
                    _vm._m(55)
                  ])
                ]),
                _c("div", { staticClass: "filter__item filter__item_sm" }, [
                  _c("div", { staticClass: "select" }, [
                    _c("div", { staticClass: "select__label" }, [
                      _c("span", [_vm._v("Символ")]),
                      _c("i", [
                        _c(
                          "svg",
                          {
                            staticClass: "ico_svg",
                            attrs: {
                              viewBox: "0 0 14 9",
                              xmlns: "http://www.w3.org/2000/svg"
                            }
                          },
                          [
                            _c("use", {
                              attrs: {
                                "xlink:href":
                                  "img/sprite_icons.svg#icon__shape",
                                "xmlns:xlink": "http://www.w3.org/1999/xlink"
                              }
                            })
                          ]
                        )
                      ])
                    ]),
                    _c("div", { staticClass: "select__dropdown" }, [
                      _c("div", { staticClass: "select__content" }, [
                        _c("div", { staticClass: "select__search" }, [
                          _c("input", {
                            staticClass: "select__search_input",
                            attrs: {
                              type: "text",
                              value: "",
                              placeholder: "Введите имя аналитика"
                            }
                          }),
                          _c(
                            "button",
                            {
                              staticClass: "select__search_button",
                              attrs: { type: "button" }
                            },
                            [
                              _c(
                                "svg",
                                {
                                  staticClass: "ico_svg",
                                  attrs: {
                                    viewBox: "0 0 14 14",
                                    xmlns: "http://www.w3.org/2000/svg"
                                  }
                                },
                                [
                                  _c("use", {
                                    attrs: {
                                      "xlink:href":
                                        "img/sprite_icons.svg#icon__search",
                                      "xmlns:xlink":
                                        "http://www.w3.org/1999/xlink"
                                    }
                                  })
                                ]
                              )
                            ]
                          )
                        ]),
                        _vm._m(56)
                      ]),
                      _vm._m(57)
                    ])
                  ])
                ]),
                _vm._m(58)
              ])
            ]),
            _c("div", { staticClass: "sort" }, [
              _c("div", { staticClass: "sort__title" }, [
                _vm._v("Сортировки:")
              ]),
              _c("div", { staticClass: "sort__row" }, [
                _c("div", { staticClass: "sort__item" }, [
                  _c("span", [_vm._v("Точность тренда")]),
                  _c("i", [
                    _c(
                      "svg",
                      {
                        staticClass: "ico_svg",
                        attrs: {
                          viewBox: "0 0 9 17",
                          xmlns: "http://www.w3.org/2000/svg"
                        }
                      },
                      [
                        _c("use", {
                          attrs: {
                            "xlink:href": "img/sprite_icons.svg#icon__sort",
                            "xmlns:xlink": "http://www.w3.org/1999/xlink"
                          }
                        })
                      ]
                    )
                  ])
                ]),
                _c("div", { staticClass: "sort__item" }, [
                  _c("span", [_vm._v("Точность цены")]),
                  _c("i", [
                    _c(
                      "svg",
                      {
                        staticClass: "ico_svg",
                        attrs: {
                          viewBox: "0 0 9 17",
                          xmlns: "http://www.w3.org/2000/svg"
                        }
                      },
                      [
                        _c("use", {
                          attrs: {
                            "xlink:href": "img/sprite_icons.svg#icon__sort",
                            "xmlns:xlink": "http://www.w3.org/1999/xlink"
                          }
                        })
                      ]
                    )
                  ])
                ]),
                _c("div", { staticClass: "sort__item" }, [
                  _c("span", [_vm._v("Доходность")]),
                  _c("i", [
                    _c(
                      "svg",
                      {
                        staticClass: "ico_svg",
                        attrs: {
                          viewBox: "0 0 9 17",
                          xmlns: "http://www.w3.org/2000/svg"
                        }
                      },
                      [
                        _c("use", {
                          attrs: {
                            "xlink:href": "img/sprite_icons.svg#icon__sort",
                            "xmlns:xlink": "http://www.w3.org/1999/xlink"
                          }
                        })
                      ]
                    )
                  ])
                ])
              ])
            ]),
            _vm._m(59),
            _c("div", { staticClass: "text_center mb_30" }, [
              _c(
                "button",
                {
                  staticClass: "btn btn_arrow_down",
                  attrs: { type: "button" }
                },
                [
                  _c("span", [_vm._v("Посмотреть ещё")]),
                  _c("i", [
                    _c(
                      "svg",
                      {
                        staticClass: "ico_svg",
                        attrs: {
                          viewBox: "0 0 16 16",
                          xmlns: "http://www.w3.org/2000/svg"
                        }
                      },
                      [
                        _c("use", {
                          attrs: {
                            "xlink:href": "img/sprite_icons.svg#icon__reload",
                            "xmlns:xlink": "http://www.w3.org/1999/xlink"
                          }
                        })
                      ]
                    )
                  ])
                ]
              )
            ])
          ])
        ]),
        _c("div", { staticClass: "box" }, [
          _vm._m(60),
          _c("div", { staticClass: "box__content" }, [
            _vm._m(61),
            _c("div", { staticClass: "text_center mb_30" }, [
              _c(
                "button",
                {
                  staticClass: "btn btn_arrow_down",
                  attrs: { type: "button" }
                },
                [
                  _c("span", [_vm._v("Посмотреть ещё")]),
                  _c("i", [
                    _c(
                      "svg",
                      {
                        staticClass: "ico_svg",
                        attrs: {
                          viewBox: "0 0 16 16",
                          xmlns: "http://www.w3.org/2000/svg"
                        }
                      },
                      [
                        _c("use", {
                          attrs: {
                            "xlink:href": "img/sprite_icons.svg#icon__reload",
                            "xmlns:xlink": "http://www.w3.org/1999/xlink"
                          }
                        })
                      ]
                    )
                  ])
                ]
              )
            ])
          ])
        ]),
        _vm._m(62)
      ])
    ]),
    _c("footer", { staticClass: "footer" }, [
      _c("div", { staticClass: "container" }, [
        _c("div", { staticClass: "footer__top" }, [
          _vm._m(63),
          _vm._m(64),
          _vm._m(65),
          _c("div", { staticClass: "footer__top_contact" }, [
            _c("div", { staticClass: "footer__title" }, [
              _vm._v("Напишите нам")
            ]),
            _c("ul", { staticClass: "footer__contact" }, [
              _c("li", [
                _c("a", { attrs: { href: "#" } }, [
                  _c(
                    "svg",
                    {
                      staticClass: "ico_svg",
                      attrs: {
                        viewBox: "0 0 448 512",
                        xmlns: "http://www.w3.org/2000/svg"
                      }
                    },
                    [
                      _c("use", {
                        attrs: {
                          "xlink:href": "img/sprite_icons.svg#icon__skype",
                          "xmlns:xlink": "http://www.w3.org/1999/xlink"
                        }
                      })
                    ]
                  )
                ])
              ]),
              _c("li", [
                _c("a", { attrs: { href: "#" } }, [
                  _c(
                    "svg",
                    {
                      staticClass: "ico_svg",
                      attrs: {
                        viewBox: "0 0 448 512",
                        xmlns: "http://www.w3.org/2000/svg"
                      }
                    },
                    [
                      _c("use", {
                        attrs: {
                          "xlink:href": "img/sprite_icons.svg#icon__whatsapp",
                          "xmlns:xlink": "http://www.w3.org/1999/xlink"
                        }
                      })
                    ]
                  )
                ])
              ]),
              _c("li", [
                _c("a", { attrs: { href: "#" } }, [
                  _c(
                    "svg",
                    {
                      staticClass: "ico_svg",
                      attrs: {
                        viewBox: "0 0 512 512",
                        xmlns: "http://www.w3.org/2000/svg"
                      }
                    },
                    [
                      _c("use", {
                        attrs: {
                          "xlink:href": "img/sprite_icons.svg#icon__viber",
                          "xmlns:xlink": "http://www.w3.org/1999/xlink"
                        }
                      })
                    ]
                  )
                ])
              ]),
              _c("li", [
                _c("a", { attrs: { href: "#" } }, [
                  _c(
                    "svg",
                    {
                      staticClass: "ico_svg",
                      attrs: {
                        viewBox: "0 0 496 512",
                        xmlns: "http://www.w3.org/2000/svg"
                      }
                    },
                    [
                      _c("use", {
                        attrs: {
                          "xlink:href": "img/sprite_icons.svg#icon__telegram",
                          "xmlns:xlink": "http://www.w3.org/1999/xlink"
                        }
                      })
                    ]
                  )
                ])
              ]),
              _c("li", [
                _c("a", { attrs: { href: "#" } }, [
                  _c(
                    "svg",
                    {
                      staticClass: "ico_svg",
                      attrs: {
                        viewBox: "0 0 550.795 550.795",
                        xmlns: "http://www.w3.org/2000/svg"
                      }
                    },
                    [
                      _c("use", {
                        attrs: {
                          "xlink:href": "img/sprite_icons.svg#icon__envelope",
                          "xmlns:xlink": "http://www.w3.org/1999/xlink"
                        }
                      })
                    ]
                  )
                ])
              ])
            ])
          ]),
          _c("div", { staticClass: "footer__top_links" }, [
            _c("div", { staticClass: "footer__links" }, [
              _vm._m(66),
              _c("div", { staticClass: "footer__links_col" }, [
                _c("ul", { staticClass: "footer__social" }, [
                  _c("li", [
                    _c("a", { attrs: { href: "#" } }, [
                      _c(
                        "svg",
                        {
                          staticClass: "ico_svg",
                          attrs: {
                            viewBox: "0 0 576 512",
                            xmlns: "http://www.w3.org/2000/svg"
                          }
                        },
                        [
                          _c("use", {
                            attrs: {
                              "xlink:href":
                                "img/sprite_icons.svg#icon__youtube",
                              "xmlns:xlink": "http://www.w3.org/1999/xlink"
                            }
                          })
                        ]
                      )
                    ])
                  ]),
                  _c("li", [
                    _c("a", { attrs: { href: "#" } }, [
                      _c(
                        "svg",
                        {
                          staticClass: "ico_svg",
                          attrs: {
                            viewBox: "0 0 512 512",
                            xmlns: "http://www.w3.org/2000/svg"
                          }
                        },
                        [
                          _c("use", {
                            attrs: {
                              "xlink:href":
                                "img/sprite_icons.svg#icon__facebook",
                              "xmlns:xlink": "http://www.w3.org/1999/xlink"
                            }
                          })
                        ]
                      )
                    ])
                  ]),
                  _c("li", [
                    _c("a", { attrs: { href: "#" } }, [
                      _c(
                        "svg",
                        {
                          staticClass: "ico_svg",
                          attrs: {
                            viewBox: "0 0 512 512",
                            xmlns: "http://www.w3.org/2000/svg"
                          }
                        },
                        [
                          _c("use", {
                            attrs: {
                              "xlink:href":
                                "img/sprite_icons.svg#icon__twitter",
                              "xmlns:xlink": "http://www.w3.org/1999/xlink"
                            }
                          })
                        ]
                      )
                    ])
                  ])
                ])
              ])
            ])
          ])
        ]),
        _vm._m(67)
      ])
    ]),
    _vm._m(68)
  ])
}
var staticRenderFns = [
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "top__toggle nav_toggle" }, [_c("span")])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "lng__content" }, [
      _c("a", { staticClass: "lng__item", attrs: { href: "#" } }, [
        _vm._v("En")
      ]),
      _c("a", { staticClass: "lng__item", attrs: { href: "#" } }, [
        _vm._v("Ru")
      ]),
      _c("a", { staticClass: "lng__item", attrs: { href: "#" } }, [
        _vm._v("De")
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "top__content_item hi" }, [
      _c("a", { staticClass: "btn", attrs: { href: "#" } }, [
        _vm._v("Разместить прогноз")
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "top__content_item" }, [
      _c("a", { staticClass: "btn btn_blue", attrs: { href: "#" } }, [
        _vm._v("Получить прогноз")
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("a", { staticClass: "header__logo", attrs: { href: "#" } }, [
      _c("strong", [_vm._v("FIN")]),
      _c("span", [_vm._v("Prognoz")])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("ul", [
      _c("li", [
        _c("a", { attrs: { href: "#" } }, [
          _c("span", [_vm._v("Текущие прогнозы")])
        ])
      ]),
      _c("li", [
        _c("a", { attrs: { href: "#" } }, [
          _c("span", [_vm._v("Завершенные прогнозы")])
        ])
      ]),
      _c("li", [
        _c("a", { attrs: { href: "#" } }, [
          _c("span", [_vm._v("Заказать прогноз")])
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("li", [
      _c("a", { attrs: { href: "#" } }, [_c("span", [_vm._v("Аналитики")])])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("ul", [
      _c("li", [
        _c("a", { attrs: { href: "#" } }, [
          _c("span", [_vm._v("Аренда робота")])
        ])
      ]),
      _c("li", [
        _c("a", { attrs: { href: "#" } }, [_c("span", [_vm._v("50/50")])])
      ]),
      _c("li", [
        _c("a", { attrs: { href: "#" } }, [
          _c("span", [_vm._v("Продажа робота")])
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("li", [
      _c("a", { attrs: { href: "#" } }, [_c("span", [_vm._v("Вебинары")])])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("li", [
      _c("a", { attrs: { href: "#" } }, [_c("span", [_vm._v("Обучение")])])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("ul", [
      _c("li", [
        _c("a", { attrs: { href: "#" } }, [
          _c("span", [_vm._v("Разместить прогноз")])
        ])
      ]),
      _c("li", [
        _c("a", { attrs: { href: "#" } }, [
          _c("span", [_vm._v("Заявки на прогнозы")]),
          _c("b", [_vm._v("99")])
        ])
      ]),
      _c("li", [
        _c("a", { attrs: { href: "#" } }, [
          _c("span", [_vm._v("Составить портфель инвестова")])
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "user__dropdown" }, [
      _c("ul", [
        _c("li", [
          _c("a", { attrs: { href: "#" } }, [_vm._v("Ссылка первая")])
        ]),
        _c("li", [
          _c("a", { attrs: { href: "#" } }, [_vm._v("Ссылка вторая")])
        ]),
        _c("li", [
          _c("a", { attrs: { href: "#" } }, [_vm._v("Ссылка третья")])
        ]),
        _c("li", [
          _c("a", { attrs: { href: "#" } }, [_vm._v("Ссылка четвертая")])
        ]),
        _c("li", [_c("a", { attrs: { href: "#" } }, [_vm._v("Выйти")])])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("ul", { staticClass: "breadcrumb mb_30" }, [
      _c("li", [_c("a", { attrs: { href: "#" } }, [_vm._v("Главная")])]),
      _c("li", [_c("span", [_vm._v("Профиль аналитика")])])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("ul", { staticClass: "profile__header_actions" }, [
      _c("li", [
        _c("a", { staticClass: "btn btn_green", attrs: { href: "#" } }, [
          _vm._v("Подписаться на прогнозы")
        ])
      ]),
      _c("li", [
        _c("a", { staticClass: "btn btn_blue", attrs: { href: "#" } }, [
          _vm._v("Заказать у меня прогноз")
        ])
      ]),
      _c("li", [
        _c("a", { staticClass: "btn btn_blue", attrs: { href: "#" } }, [
          _vm._v("Подключить робота")
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "profile__item" }, [
      _c("div", { staticClass: "profile__item_label" }, [
        _vm._v("Опыт на финансовых рынках")
      ]),
      _c("div", { staticClass: "profile__item_text" }, [_vm._v("7 лет")])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "box__header mb_30" }, [
      _c("div", { staticClass: "box__header_title" }, [
        _vm._v("Все текущие прогнозы")
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("thead", [
      _c("tr", [
        _c("th", [_vm._v("Дата и время "), _c("br"), _vm._v("установки")]),
        _c("th", { staticClass: "text_center" }, [_vm._v("Рынок (Биржа)")]),
        _c("th", { staticClass: "text_center" }, [_vm._v("Символ")]),
        _c("th", { staticClass: "text_center" }, [
          _vm._v("Точность прогноза "),
          _c("br"),
          _vm._v("по символу, %")
        ]),
        _c("th", { staticClass: "text_center" }, [_vm._v("Цена открытия")]),
        _c("th", { staticClass: "text_center" }, [_vm._v("Прогноз")]),
        _c("th", { staticClass: "text_center" }, [
          _vm._v("Дата завершения "),
          _c("br"),
          _vm._v("прогноза")
        ]),
        _c("th", { staticClass: "text_center" }, [_vm._v("Стоимость")]),
        _c("th")
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("td", { staticClass: "text_center" }, [
      _c("strong", [_vm._v("Лукойл")])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("td", { staticClass: "text_center" }, [
      _c("strong", { staticClass: "color_green" }, [_vm._v("80")])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("td", [
      _c("div", { staticClass: "table_price" }, [
        _c("label", { staticClass: "form_checkbox" }, [
          _c("input", { attrs: { type: "checkbox", name: "chk", value: "" } }),
          _c("span")
        ]),
        _c("span", [_vm._v("499 руб.")])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "info_link__tooltip" }, [
      _c("div", { staticClass: "info_link__tooltip_wrap" }, [
        _c("div", { staticClass: "info_link__date" }, [
          _vm._v("17 ноября 2019")
        ]),
        _c("div", { staticClass: "info_link__text" }, [
          _vm._v(
            "Повседневная практика показывает, что сложившаяся структура организации играет важную роль в формировании форм развития. Повседневная практика показывает, что сложившаяся структура организации позволяет выполнять важные задания по разработке систем массового участия. "
          )
        ]),
        _c("a", { staticClass: "info_link__file", attrs: { href: "#" } }, [
          _c("i", [
            _c("img", {
              staticClass: "img_fluid",
              attrs: { src: "img/icon__pdf.svg", alt: "" }
            })
          ]),
          _c("span", [_vm._v("Заголовок документа")])
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("td", { staticClass: "text_center" }, [
      _c("strong", [_vm._v("Лукойл")])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("td", [
      _c("div", { staticClass: "table_price" }, [
        _c("label", { staticClass: "form_checkbox" }, [
          _c("input", { attrs: { type: "checkbox", name: "chk", value: "" } }),
          _c("span")
        ]),
        _c("span", [_vm._v("499 руб.")])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "info_link__tooltip" }, [
      _c("div", { staticClass: "info_link__tooltip_wrap" }, [
        _c("div", { staticClass: "info_link__date" }, [
          _vm._v("17 ноября 2019")
        ]),
        _c("div", { staticClass: "info_link__text" }, [
          _vm._v(
            "Повседневная практика показывает, что сложившаяся структура организации играет важную роль в формировании форм развития. Повседневная практика показывает, что сложившаяся структура организации позволяет выполнять важные задания по разработке систем массового участия. "
          )
        ]),
        _c("a", { staticClass: "info_link__file", attrs: { href: "#" } }, [
          _c("i", [
            _c("img", {
              staticClass: "img_fluid",
              attrs: { src: "img/icon__pdf.svg", alt: "" }
            })
          ]),
          _c("span", [_vm._v("Заголовок документа")])
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("td", { staticClass: "text_center" }, [
      _c("strong", [_vm._v("Лукойл")])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("td", { staticClass: "text_center" }, [
      _c("strong", { staticClass: "color_green" }, [_vm._v("80")])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("td", [
      _c("div", { staticClass: "table_price" }, [
        _c("label", { staticClass: "form_checkbox" }, [
          _c("input", { attrs: { type: "checkbox", name: "chk", value: "" } }),
          _c("span")
        ]),
        _c("span", [_vm._v("499 руб.")])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "info_link__tooltip" }, [
      _c("div", { staticClass: "info_link__tooltip_wrap" }, [
        _c("div", { staticClass: "info_link__date" }, [
          _vm._v("17 ноября 2019")
        ]),
        _c("div", { staticClass: "info_link__text" }, [
          _vm._v(
            "Повседневная практика показывает, что сложившаяся структура организации играет важную роль в формировании форм развития. Повседневная практика показывает, что сложившаяся структура организации позволяет выполнять важные задания по разработке систем массового участия. "
          )
        ]),
        _c("a", { staticClass: "info_link__file", attrs: { href: "#" } }, [
          _c("i", [
            _c("img", {
              staticClass: "img_fluid",
              attrs: { src: "img/icon__pdf.svg", alt: "" }
            })
          ]),
          _c("span", [_vm._v("Заголовок документа")])
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("td", { staticClass: "text_center" }, [
      _c("strong", [_vm._v("Лукойл")])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("td", { staticClass: "text_center" }, [
      _c("strong", { staticClass: "color_green" }, [_vm._v("80")])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("td", [
      _c("div", { staticClass: "table_price" }, [
        _c("label", { staticClass: "form_checkbox" }, [
          _c("input", { attrs: { type: "checkbox", name: "chk", value: "" } }),
          _c("span")
        ]),
        _c("span", [_vm._v("499 руб.")])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "info_link__tooltip" }, [
      _c("div", { staticClass: "info_link__tooltip_wrap" }, [
        _c("div", { staticClass: "info_link__date" }, [
          _vm._v("17 ноября 2019")
        ]),
        _c("div", { staticClass: "info_link__text" }, [
          _vm._v(
            "Повседневная практика показывает, что сложившаяся структура организации играет важную роль в формировании форм развития. Повседневная практика показывает, что сложившаяся структура организации позволяет выполнять важные задания по разработке систем массового участия. "
          )
        ]),
        _c("a", { staticClass: "info_link__file", attrs: { href: "#" } }, [
          _c("i", [
            _c("img", {
              staticClass: "img_fluid",
              attrs: { src: "img/icon__pdf.svg", alt: "" }
            })
          ]),
          _c("span", [_vm._v("Заголовок документа")])
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("td", { staticClass: "text_center" }, [
      _c("strong", [_vm._v("Лукойл")])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("td", { staticClass: "text_center" }, [
      _c("strong", { staticClass: "color_green" }, [_vm._v("80")])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("td", [
      _c("div", { staticClass: "table_price" }, [
        _c("label", { staticClass: "form_checkbox" }, [
          _c("input", { attrs: { type: "checkbox", name: "chk", value: "" } }),
          _c("span")
        ]),
        _c("span", [_vm._v("499 руб.")])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "info_link__tooltip" }, [
      _c("div", { staticClass: "info_link__tooltip_wrap" }, [
        _c("div", { staticClass: "info_link__date" }, [
          _vm._v("17 ноября 2019")
        ]),
        _c("div", { staticClass: "info_link__text" }, [
          _vm._v(
            "Повседневная практика показывает, что сложившаяся структура организации играет важную роль в формировании форм развития. Повседневная практика показывает, что сложившаяся структура организации позволяет выполнять важные задания по разработке систем массового участия. "
          )
        ]),
        _c("a", { staticClass: "info_link__file", attrs: { href: "#" } }, [
          _c("i", [
            _c("img", {
              staticClass: "img_fluid",
              attrs: { src: "img/icon__pdf.svg", alt: "" }
            })
          ]),
          _c("span", [_vm._v("Заголовок документа")])
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("td", { staticClass: "text_center" }, [
      _c("strong", [_vm._v("Лукойл")])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("td", { staticClass: "text_center" }, [
      _c("strong", { staticClass: "color_green" }, [_vm._v("80")])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("td", [
      _c("div", { staticClass: "table_price" }, [
        _c("label", { staticClass: "form_checkbox" }, [
          _c("input", { attrs: { type: "checkbox", name: "chk", value: "" } }),
          _c("span")
        ]),
        _c("span", [_vm._v("499 руб.")])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "info_link__tooltip" }, [
      _c("div", { staticClass: "info_link__tooltip_wrap" }, [
        _c("div", { staticClass: "info_link__date" }, [
          _vm._v("17 ноября 2019")
        ]),
        _c("div", { staticClass: "info_link__text" }, [
          _vm._v(
            "Повседневная практика показывает, что сложившаяся структура организации играет важную роль в формировании форм развития. Повседневная практика показывает, что сложившаяся структура организации позволяет выполнять важные задания по разработке систем массового участия. "
          )
        ]),
        _c("a", { staticClass: "info_link__file", attrs: { href: "#" } }, [
          _c("i", [
            _c("img", {
              staticClass: "img_fluid",
              attrs: { src: "img/icon__pdf.svg", alt: "" }
            })
          ]),
          _c("span", [_vm._v("Заголовок документа")])
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "box__summary" }, [
      _c("div", { staticClass: "box__summary_price" }, [
        _c("span", [_vm._v("Итого к оплате:")]),
        _vm._v(" "),
        _c("strong", { staticClass: "color_blue" }, [
          _c("span", [_vm._v("499")]),
          _vm._v(" руб")
        ])
      ]),
      _c("div", { staticClass: "box__summary_btn" }, [
        _c("a", { staticClass: "btn btn_green", attrs: { href: "#" } }, [
          _vm._v("Оплатить")
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "box__header mb_30" }, [
      _c("div", { staticClass: "box__header_title" }, [
        _vm._v("Инвестиционные портфели")
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("thead", [
      _c("tr", [
        _c("th", [_vm._v("Дата составления")]),
        _c("th", { staticClass: "text_center" }, [_vm._v("Дата окончания")]),
        _c("th", { staticClass: "text_center" }, [_vm._v("Рынок")]),
        _c("th", { staticClass: "text_center" }, [_vm._v("Биржа")]),
        _c("th", { staticClass: "text_center" }, [
          _vm._v("Количество "),
          _c("br"),
          _vm._v("символов")
        ]),
        _c("th", { staticClass: "text_center" }, [
          _vm._v("Прогноз "),
          _c("br"),
          _vm._v("доходности %")
        ]),
        _c("th", { staticClass: "text_center" }, [_vm._v("Стоимость")]),
        _c("th", { staticClass: "text_center" })
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("td", { staticClass: "text_center" }, [
      _c(
        "div",
        {
          staticClass: "small_line",
          attrs: {
            "data-tooltip":
              "Акции, Облигации, Форекс, Nise, ММББ, Облигации, Акции"
          }
        },
        [
          _c("span", [
            _vm._v("Акции, Облигации, Форекс, Nise, ММББ, Облигации, Акции")
          ])
        ]
      )
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("td", { staticClass: "text_center" }, [
      _c(
        "div",
        {
          staticClass: "small_line",
          attrs: {
            "data-tooltip": "Nise, ММВБ, Форекс, Nise, ММББ, Облигации, Акции"
          }
        },
        [_c("span", [_vm._v("Nise, ММВБ, Форекс")])]
      )
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("td", { staticClass: "text_center" }, [
      _c("div", { staticClass: "table_price" }, [
        _c("label", { staticClass: "form_checkbox" }, [
          _c("input", { attrs: { type: "checkbox", name: "chk", value: "" } }),
          _c("span")
        ]),
        _c("span", [_vm._v("499 руб.")])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "info_link__tooltip" }, [
      _c("div", { staticClass: "info_link__tooltip_wrap" }, [
        _c("div", { staticClass: "info_link__date" }, [
          _vm._v("17 ноября 2019")
        ]),
        _c("div", { staticClass: "info_link__text" }, [
          _vm._v(
            "Повседневная практика показывает, что сложившаяся структура организации играет важную роль в формировании форм развития. Повседневная практика показывает, что сложившаяся структура организации позволяет выполнять важные задания по разработке систем массового участия. "
          )
        ]),
        _c("a", { staticClass: "info_link__file", attrs: { href: "#" } }, [
          _c("i", [
            _c("img", {
              staticClass: "img_fluid",
              attrs: { src: "img/icon__pdf.svg", alt: "" }
            })
          ]),
          _c("span", [_vm._v("Заголовок документа")])
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("td", { staticClass: "text_center" }, [
      _c(
        "div",
        {
          staticClass: "small_line",
          attrs: {
            "data-tooltip":
              "Акции, Облигации, Форекс, Nise, ММББ, Облигации, Акции"
          }
        },
        [
          _c("span", [
            _vm._v("Акции, Облигации, Форекс, Nise, ММББ, Облигации, Акции")
          ])
        ]
      )
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("td", { staticClass: "text_center" }, [
      _c(
        "div",
        {
          staticClass: "small_line",
          attrs: {
            "data-tooltip": "Nise, ММВБ, Форекс, Nise, ММББ, Облигации, Акции"
          }
        },
        [_c("span", [_vm._v("Nise, ММВБ, Форекс")])]
      )
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("td", { staticClass: "text_center" }, [
      _c("div", { staticClass: "table_price" }, [
        _c("label", { staticClass: "form_checkbox" }, [
          _c("input", { attrs: { type: "checkbox", name: "chk", value: "" } }),
          _c("span")
        ]),
        _c("span", [_vm._v("499 руб.")])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "info_link__tooltip" }, [
      _c("div", { staticClass: "info_link__tooltip_wrap" }, [
        _c("div", { staticClass: "info_link__date" }, [
          _vm._v("17 ноября 2019")
        ]),
        _c("div", { staticClass: "info_link__text" }, [
          _vm._v(
            "Повседневная практика показывает, что сложившаяся структура организации играет важную роль в формировании форм развития. Повседневная практика показывает, что сложившаяся структура организации позволяет выполнять важные задания по разработке систем массового участия. "
          )
        ]),
        _c("a", { staticClass: "info_link__file", attrs: { href: "#" } }, [
          _c("i", [
            _c("img", {
              staticClass: "img_fluid",
              attrs: { src: "img/icon__pdf.svg", alt: "" }
            })
          ]),
          _c("span", [_vm._v("Заголовок документа")])
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "box__summary" }, [
      _c("div", { staticClass: "box__summary_price" }, [
        _c("span", [_vm._v("Итого к оплате:")]),
        _vm._v(" "),
        _c("strong", { staticClass: "color_blue" }, [_vm._v("0 руб")])
      ]),
      _c("div", { staticClass: "box__summary_btn" }, [
        _c("a", { staticClass: "btn btn_green", attrs: { href: "#" } }, [
          _vm._v("Оплатить")
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "box" }, [
      _c("div", { staticClass: "box__header mb_25" }, [
        _c("div", { staticClass: "box__header_title" }, [_vm._v("Статистика")])
      ]),
      _c("div", { staticClass: "box__content" }, [
        _c("ul", { staticClass: "stat_nav" }, [
          _c("li", { staticClass: "active" }, [
            _c("a", { attrs: { href: "#" } }, [_vm._v("1 мес")])
          ]),
          _c("li", [_c("a", { attrs: { href: "#" } }, [_vm._v("3 мес")])]),
          _c("li", [_c("a", { attrs: { href: "#" } }, [_vm._v("6 мес")])]),
          _c("li", [_c("a", { attrs: { href: "#" } }, [_vm._v("12 мес")])]),
          _c("li", [
            _c("a", { attrs: { href: "#" } }, [_vm._v("За все время")])
          ])
        ]),
        _c("div", { staticClass: "chart__row" }, [
          _c("div", { staticClass: "chart__col" }, [
            _c("div", { staticClass: "chart__title" }, [
              _vm._v("Количество прогнозов")
            ]),
            _c("div", { staticClass: "chart" }, [
              _c("canvas", { attrs: { id: "chart01" } })
            ])
          ]),
          _c("div", { staticClass: "chart__col" }, [
            _c("div", { staticClass: "chart__title" }, [
              _vm._v("Точность прогноза тренда")
            ]),
            _c("div", { staticClass: "chart" }, [
              _c("canvas", { attrs: { id: "chart02" } })
            ])
          ]),
          _c("div", { staticClass: "chart__col" }, [
            _c("div", { staticClass: "chart__title" }, [
              _vm._v("Точность прогноза цены")
            ]),
            _c("div", { staticClass: "chart" }, [
              _c("canvas", { attrs: { id: "chart03" } })
            ])
          ]),
          _c("div", { staticClass: "chart__col" }, [
            _c("div", { staticClass: "chart__title" }, [
              _vm._v("Доходность, пункты")
            ]),
            _c("div", { staticClass: "chart" }, [
              _c("canvas", { attrs: { id: "chart04" } })
            ])
          ])
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "box__header" }, [
      _c("div", { staticClass: "box__header_title" }, [
        _vm._v("Средние значения по Символам")
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "select__dropdown" }, [
      _c(
        "div",
        {
          staticClass: "select__content",
          staticStyle: { "max-height": "210px" }
        },
        [
          _c("ul", { staticClass: "select__option" }, [
            _c("li", [_c("span", [_vm._v("Рынок")])]),
            _c("li", [_c("span", [_vm._v("Лукойл")])]),
            _c("li", [_c("span", [_vm._v("USD/RUB")])]),
            _c("li", [_c("span", [_vm._v("Apple")])]),
            _c("li", [_c("span", [_vm._v("Nike")])]),
            _c("li", [_c("span", [_vm._v("Лукойл")])]),
            _c("li", [_c("span", [_vm._v("USD/RUB")])]),
            _c("li", [_c("span", [_vm._v("Apple")])]),
            _c("li", [_c("span", [_vm._v("Nike")])]),
            _c("li", [_c("span", [_vm._v("Лукойл")])]),
            _c("li", [_c("span", [_vm._v("USD/RUB")])]),
            _c("li", [_c("span", [_vm._v("Apple")])]),
            _c("li", [_c("span", [_vm._v("Nike")])])
          ])
        ]
      )
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "select__dropdown" }, [
      _c("div", { staticClass: "select__content" }, [
        _c("ul", { staticClass: "select__option" }, [
          _c("li", [_c("span", [_vm._v("Биржа")])]),
          _c("li", [_c("span", [_vm._v("Длинное название")])]),
          _c("li", [_c("span", [_vm._v("ММББ")])]),
          _c("li", [_c("span", [_vm._v("ММББ")])]),
          _c("li", [_c("span", [_vm._v("ММББ")])])
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("ul", { staticClass: "select__list" }, [
      _c("li", [
        _c("label", { staticClass: "form_checkbox" }, [
          _c("input", {
            attrs: { type: "checkbox", name: "n1", value: "Лукойл" }
          }),
          _c("span", [_vm._v("Лукойл")])
        ])
      ]),
      _c("li", [
        _c("label", { staticClass: "form_checkbox" }, [
          _c("input", {
            attrs: { type: "checkbox", name: "n1", value: "USD/RUB" }
          }),
          _c("span", [_vm._v("USD/RUB")])
        ])
      ]),
      _c("li", [
        _c("label", { staticClass: "form_checkbox" }, [
          _c("input", {
            attrs: { type: "checkbox", name: "n1", value: "Apple" }
          }),
          _c("span", [_vm._v("Apple")])
        ])
      ]),
      _c("li", [
        _c("label", { staticClass: "form_checkbox" }, [
          _c("input", {
            attrs: { type: "checkbox", name: "n1", value: "Газпром" }
          }),
          _c("span", [_vm._v("Газпром")])
        ])
      ]),
      _c("li", [
        _c("label", { staticClass: "form_checkbox" }, [
          _c("input", {
            attrs: { type: "checkbox", name: "n1", value: "Nike" }
          }),
          _c("span", [_vm._v("Nike")])
        ])
      ]),
      _c("li", [
        _c("label", { staticClass: "form_checkbox" }, [
          _c("input", {
            attrs: { type: "checkbox", name: "n1", value: "Лукойл" }
          }),
          _c("span", [_vm._v("Лукойл")])
        ])
      ]),
      _c("li", [
        _c("label", { staticClass: "form_checkbox" }, [
          _c("input", {
            attrs: { type: "checkbox", name: "n1", value: "USD/RUB" }
          }),
          _c("span", [_vm._v("USD/RUB")])
        ])
      ]),
      _c("li", [
        _c("label", { staticClass: "form_checkbox" }, [
          _c("input", {
            attrs: { type: "checkbox", name: "n1", value: "Apple" }
          }),
          _c("span", [_vm._v("Apple")])
        ])
      ]),
      _c("li", [
        _c("label", { staticClass: "form_checkbox" }, [
          _c("input", {
            attrs: { type: "checkbox", name: "n1", value: "Nike" }
          }),
          _c("span", [_vm._v("Nike")])
        ])
      ]),
      _c("li", [
        _c("label", { staticClass: "form_checkbox" }, [
          _c("input", {
            attrs: { type: "checkbox", name: "n1", value: "Лукойл" }
          }),
          _c("span", [_vm._v("Лукойл")])
        ])
      ]),
      _c("li", [
        _c("label", { staticClass: "form_checkbox" }, [
          _c("input", {
            attrs: { type: "checkbox", name: "n1", value: "USD/RUB" }
          }),
          _c("span", [_vm._v("USD/RUB")])
        ])
      ]),
      _c("li", [
        _c("label", { staticClass: "form_checkbox" }, [
          _c("input", {
            attrs: { type: "checkbox", name: "n1", value: "Apple" }
          }),
          _c("span", [_vm._v("Apple")])
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("ul", { staticClass: "select__buttons select__buttons_inline" }, [
      _c("li", [
        _c(
          "button",
          {
            staticClass: "btn btn_green btn_sm select_submit",
            attrs: { type: "button" }
          },
          [_vm._v(" Выбрать ")]
        )
      ]),
      _c("li", [
        _c(
          "button",
          { staticClass: "btn_clear select_clear", attrs: { type: "button" } },
          [_vm._v("Очистить ")]
        )
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "filter__item filter__item_float" }, [
      _c("ul", { staticClass: "btn_inline" }, [
        _c("li", [
          _c(
            "button",
            {
              staticClass: "btn btn_green btn_disable",
              attrs: { type: "button" }
            },
            [_vm._v("Показать")]
          )
        ]),
        _c("li", [
          _c(
            "button",
            { staticClass: "btn_clear", attrs: { type: "button" } },
            [_vm._v("Очистить")]
          )
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "informers" }, [
      _c("div", { staticClass: "informers__item" }, [
        _c("div", { staticClass: "informer" }, [
          _c("div", { staticClass: "informer__header" }, [
            _c("div", { staticClass: "informer__header_title" }, [
              _vm._v("Лукойл")
            ]),
            _c("div", { staticClass: "informer__header_logo" }, [
              _c("img", {
                staticClass: "img_fluid",
                attrs: { src: "images/logo_lk.png", alt: "" }
              })
            ])
          ]),
          _c("div", { staticClass: "informer__body" }, [
            _c("div", { staticClass: "informer__name" }, [
              _vm._v("Акции ММВБ")
            ]),
            _c("div", { staticClass: "informer__count mb_15" }, [
              _c("span", [_vm._v("Количество прогнозов:")]),
              _c("strong", [_vm._v("28")])
            ]),
            _c("div", { staticClass: "informer__row mb_0" }, [
              _c("div", { staticClass: "informer__item" }, [
                _c("div", { staticClass: "informer__item_data" }, [
                  _c("span", [_vm._v("Точность "), _c("br"), _vm._v("цены")]),
                  _c("strong", [_vm._v("30%")])
                ])
              ]),
              _c("div", { staticClass: "informer__item" }, [
                _c("div", { staticClass: "informer__item_data" }, [
                  _c("span", [_vm._v("Точность "), _c("br"), _vm._v("тренда")]),
                  _c("strong", { staticClass: "color_blue" }, [_vm._v("65%")])
                ])
              ]),
              _c("div", { staticClass: "informer__item" }, [
                _c("div", { staticClass: "informer__item_data" }, [
                  _c("span", [
                    _vm._v("Доходность, "),
                    _c("br"),
                    _vm._v("пункт/мес")
                  ]),
                  _c("strong", { staticClass: "color_blue" }, [_vm._v("99999")])
                ])
              ])
            ])
          ])
        ])
      ]),
      _c("div", { staticClass: "informers__item" }, [
        _c("div", { staticClass: "informer" }, [
          _c("div", { staticClass: "informer__header" }, [
            _c("div", { staticClass: "informer__header_title" }, [
              _vm._v("Лукойл")
            ]),
            _c("div", { staticClass: "informer__header_logo" }, [
              _c("img", {
                staticClass: "img_fluid",
                attrs: { src: "images/logo_lk.png", alt: "" }
              })
            ])
          ]),
          _c("div", { staticClass: "informer__body" }, [
            _c("div", { staticClass: "informer__name" }, [
              _vm._v("Акции ММВБ")
            ]),
            _c("div", { staticClass: "informer__count mb_15" }, [
              _c("span", [_vm._v("Количество прогнозов:")]),
              _c("strong", [_vm._v("28")])
            ]),
            _c("div", { staticClass: "informer__row mb_0" }, [
              _c("div", { staticClass: "informer__item" }, [
                _c("div", { staticClass: "informer__item_data" }, [
                  _c("span", [_vm._v("Точность "), _c("br"), _vm._v("цены")]),
                  _c("strong", [_vm._v("30%")])
                ])
              ]),
              _c("div", { staticClass: "informer__item" }, [
                _c("div", { staticClass: "informer__item_data" }, [
                  _c("span", [_vm._v("Точность "), _c("br"), _vm._v("тренда")]),
                  _c("strong", { staticClass: "color_blue" }, [_vm._v("65%")])
                ])
              ]),
              _c("div", { staticClass: "informer__item" }, [
                _c("div", { staticClass: "informer__item_data" }, [
                  _c("span", [
                    _vm._v("Доходность, "),
                    _c("br"),
                    _vm._v("пункт/мес")
                  ]),
                  _c("strong", { staticClass: "color_blue" }, [_vm._v("99999")])
                ])
              ])
            ])
          ])
        ])
      ]),
      _c("div", { staticClass: "informers__item" }, [
        _c("div", { staticClass: "informer" }, [
          _c("div", { staticClass: "informer__header" }, [
            _c("div", { staticClass: "informer__header_title" }, [
              _vm._v("Лукойл")
            ]),
            _c("div", { staticClass: "informer__header_logo" }, [
              _c("img", {
                staticClass: "img_fluid",
                attrs: { src: "images/logo_lk.png", alt: "" }
              })
            ])
          ]),
          _c("div", { staticClass: "informer__body" }, [
            _c("div", { staticClass: "informer__name" }, [
              _vm._v("Акции ММВБ")
            ]),
            _c("div", { staticClass: "informer__count mb_15" }, [
              _c("span", [_vm._v("Количество прогнозов:")]),
              _c("strong", [_vm._v("28")])
            ]),
            _c("div", { staticClass: "informer__row mb_0" }, [
              _c("div", { staticClass: "informer__item" }, [
                _c("div", { staticClass: "informer__item_data" }, [
                  _c("span", [_vm._v("Точность "), _c("br"), _vm._v("цены")]),
                  _c("strong", [_vm._v("30%")])
                ])
              ]),
              _c("div", { staticClass: "informer__item" }, [
                _c("div", { staticClass: "informer__item_data" }, [
                  _c("span", [_vm._v("Точность "), _c("br"), _vm._v("тренда")]),
                  _c("strong", { staticClass: "color_blue" }, [_vm._v("65%")])
                ])
              ]),
              _c("div", { staticClass: "informer__item" }, [
                _c("div", { staticClass: "informer__item_data" }, [
                  _c("span", [
                    _vm._v("Доходность, "),
                    _c("br"),
                    _vm._v("пункт/мес")
                  ]),
                  _c("strong", { staticClass: "color_blue" }, [_vm._v("99999")])
                ])
              ])
            ])
          ])
        ])
      ]),
      _c("div", { staticClass: "informers__item" }, [
        _c("div", { staticClass: "informer" }, [
          _c("div", { staticClass: "informer__header" }, [
            _c("div", { staticClass: "informer__header_title" }, [
              _vm._v("Лукойл")
            ]),
            _c("div", { staticClass: "informer__header_logo" }, [
              _c("img", {
                staticClass: "img_fluid",
                attrs: { src: "images/logo_lk.png", alt: "" }
              })
            ])
          ]),
          _c("div", { staticClass: "informer__body" }, [
            _c("div", { staticClass: "informer__name" }, [
              _vm._v("Акции ММВБ")
            ]),
            _c("div", { staticClass: "informer__count mb_15" }, [
              _c("span", [_vm._v("Количество прогнозов:")]),
              _c("strong", [_vm._v("28")])
            ]),
            _c("div", { staticClass: "informer__row mb_0" }, [
              _c("div", { staticClass: "informer__item" }, [
                _c("div", { staticClass: "informer__item_data" }, [
                  _c("span", [_vm._v("Точность "), _c("br"), _vm._v("цены")]),
                  _c("strong", [_vm._v("30%")])
                ])
              ]),
              _c("div", { staticClass: "informer__item" }, [
                _c("div", { staticClass: "informer__item_data" }, [
                  _c("span", [_vm._v("Точность "), _c("br"), _vm._v("тренда")]),
                  _c("strong", { staticClass: "color_blue" }, [_vm._v("65%")])
                ])
              ]),
              _c("div", { staticClass: "informer__item" }, [
                _c("div", { staticClass: "informer__item_data" }, [
                  _c("span", [
                    _vm._v("Доходность, "),
                    _c("br"),
                    _vm._v("пункт/мес")
                  ]),
                  _c("strong", { staticClass: "color_blue" }, [_vm._v("99999")])
                ])
              ])
            ])
          ])
        ])
      ]),
      _c("div", { staticClass: "informers__item" }, [
        _c("div", { staticClass: "informer" }, [
          _c("div", { staticClass: "informer__header" }, [
            _c("div", { staticClass: "informer__header_title" }, [
              _vm._v("Лукойл")
            ]),
            _c("div", { staticClass: "informer__header_logo" }, [
              _c("img", {
                staticClass: "img_fluid",
                attrs: { src: "images/logo_lk.png", alt: "" }
              })
            ])
          ]),
          _c("div", { staticClass: "informer__body" }, [
            _c("div", { staticClass: "informer__name" }, [
              _vm._v("Акции ММВБ")
            ]),
            _c("div", { staticClass: "informer__count mb_15" }, [
              _c("span", [_vm._v("Количество прогнозов:")]),
              _c("strong", [_vm._v("28")])
            ]),
            _c("div", { staticClass: "informer__row mb_0" }, [
              _c("div", { staticClass: "informer__item" }, [
                _c("div", { staticClass: "informer__item_data" }, [
                  _c("span", [_vm._v("Точность "), _c("br"), _vm._v("цены")]),
                  _c("strong", [_vm._v("30%")])
                ])
              ]),
              _c("div", { staticClass: "informer__item" }, [
                _c("div", { staticClass: "informer__item_data" }, [
                  _c("span", [_vm._v("Точность "), _c("br"), _vm._v("тренда")]),
                  _c("strong", { staticClass: "color_blue" }, [_vm._v("65%")])
                ])
              ]),
              _c("div", { staticClass: "informer__item" }, [
                _c("div", { staticClass: "informer__item_data" }, [
                  _c("span", [
                    _vm._v("Доходность, "),
                    _c("br"),
                    _vm._v("пункт/мес")
                  ]),
                  _c("strong", { staticClass: "color_blue" }, [_vm._v("99999")])
                ])
              ])
            ])
          ])
        ])
      ]),
      _c("div", { staticClass: "informers__item" }, [
        _c("div", { staticClass: "informer" }, [
          _c("div", { staticClass: "informer__header" }, [
            _c("div", { staticClass: "informer__header_title" }, [
              _vm._v("Лукойл")
            ]),
            _c("div", { staticClass: "informer__header_logo" }, [
              _c("img", {
                staticClass: "img_fluid",
                attrs: { src: "images/logo_lk.png", alt: "" }
              })
            ])
          ]),
          _c("div", { staticClass: "informer__body" }, [
            _c("div", { staticClass: "informer__name" }, [
              _vm._v("Акции ММВБ")
            ]),
            _c("div", { staticClass: "informer__count mb_15" }, [
              _c("span", [_vm._v("Количество прогнозов:")]),
              _c("strong", [_vm._v("28")])
            ]),
            _c("div", { staticClass: "informer__row mb_0" }, [
              _c("div", { staticClass: "informer__item" }, [
                _c("div", { staticClass: "informer__item_data" }, [
                  _c("span", [_vm._v("Точность "), _c("br"), _vm._v("цены")]),
                  _c("strong", [_vm._v("30%")])
                ])
              ]),
              _c("div", { staticClass: "informer__item" }, [
                _c("div", { staticClass: "informer__item_data" }, [
                  _c("span", [_vm._v("Точность "), _c("br"), _vm._v("тренда")]),
                  _c("strong", { staticClass: "color_blue" }, [_vm._v("65%")])
                ])
              ]),
              _c("div", { staticClass: "informer__item" }, [
                _c("div", { staticClass: "informer__item_data" }, [
                  _c("span", [
                    _vm._v("Доходность, "),
                    _c("br"),
                    _vm._v("пункт/мес")
                  ]),
                  _c("strong", { staticClass: "color_blue" }, [_vm._v("99999")])
                ])
              ])
            ])
          ])
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "box__header mb_30" }, [
      _c("div", { staticClass: "box__header_title" }, [
        _vm._v("История прогнозов")
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "div",
      { staticClass: "table_responsive table_responsive_lg  mb_35" },
      [
        _c("table", { staticClass: "table" }, [
          _c("thead", [
            _c("tr", [
              _c("th", [
                _c("span", { staticClass: "table_sort" }, [
                  _vm._v("Символ (Биржа)")
                ])
              ]),
              _c("th", { staticClass: "text_center" }, [
                _c("span", { staticClass: "table_sort" }, [
                  _vm._v("Дата "),
                  _c("br"),
                  _vm._v("закрытия")
                ])
              ]),
              _c("th", { staticClass: "text_center" }, [
                _c("span", { staticClass: "table_sort" }, [
                  _vm._v("Цена "),
                  _c("br"),
                  _vm._v("открытия")
                ])
              ]),
              _c("th", { staticClass: "text_center" }, [
                _c("span", { staticClass: "table_sort" }, [
                  _vm._v("Прогнозируемая "),
                  _c("br"),
                  _vm._v("цена")
                ])
              ]),
              _c("th", { staticClass: "text_center" }, [
                _c("span", { staticClass: "table_sort" }, [
                  _vm._v("Цена "),
                  _c("br"),
                  _vm._v("закрытия")
                ])
              ]),
              _c("th", { staticClass: "text_center" }, [
                _c("span", { staticClass: "table_sort" }, [
                  _vm._v("Прогноз тренда"),
                  _c("br"),
                  _c("small", [_vm._v("точность в %")])
                ])
              ]),
              _c("th", { staticClass: "text_center" }, [
                _c("span", { staticClass: "table_sort" }, [
                  _vm._v("Прогноз цены"),
                  _c("br"),
                  _c("small", [_vm._v("точность в %")])
                ])
              ]),
              _c("th", { staticClass: "text_center" }, [
                _c("span", { staticClass: "table_sort" }, [
                  _vm._v("Доходность"),
                  _c("br"),
                  _c("small", [_vm._v("пункты в %")])
                ])
              ]),
              _c("th", { staticClass: "text_center" }, [
                _c("span", { staticClass: "table_sort" }, [
                  _vm._v("Срок "),
                  _c("br"),
                  _vm._v("прогноза")
                ])
              ])
            ])
          ]),
          _c("tbody", [
            _c("tr", [
              _c("td", [_c("strong", [_vm._v("Лукойл")])]),
              _c("td", { staticClass: "text_center" }, [_vm._v("25 дек 2018")]),
              _c("td", { staticClass: "text_center" }, [_vm._v("120")]),
              _c("td", { staticClass: "text_center" }, [_vm._v("120")]),
              _c("td", { staticClass: "text_center" }, [_vm._v("130")]),
              _c("td", { staticClass: "text_center" }, [_vm._v("130")]),
              _c("td", { staticClass: "text_center" }, [_vm._v("80")]),
              _c("td", { staticClass: "text_center" }, [
                _c("strong", { staticClass: "color_green" }, [_vm._v("0,001")])
              ]),
              _c("td", { staticClass: "text_center" }, [_vm._v("Внутри дня")])
            ]),
            _c("tr", [
              _c("td", [_c("strong", [_vm._v("Лукойл")])]),
              _c("td", { staticClass: "text_center" }, [_vm._v("25 дек 2018")]),
              _c("td", { staticClass: "text_center" }, [_vm._v("120")]),
              _c("td", { staticClass: "text_center" }, [_vm._v("120")]),
              _c("td", { staticClass: "text_center" }, [_vm._v("130")]),
              _c("td", { staticClass: "text_center" }, [_vm._v("130")]),
              _c("td", { staticClass: "text_center" }, [_vm._v("80")]),
              _c("td", { staticClass: "text_center" }, [
                _c("strong", { staticClass: "color_green" }, [_vm._v("0,001")])
              ]),
              _c("td", { staticClass: "text_center" }, [_vm._v("Внутри дня")])
            ]),
            _c("tr", [
              _c("td", [_c("strong", [_vm._v("Лукойл")])]),
              _c("td", { staticClass: "text_center" }, [_vm._v("25 дек 2018")]),
              _c("td", { staticClass: "text_center" }, [_vm._v("120")]),
              _c("td", { staticClass: "text_center" }, [_vm._v("120")]),
              _c("td", { staticClass: "text_center" }, [_vm._v("130")]),
              _c("td", { staticClass: "text_center" }, [_vm._v("130")]),
              _c("td", { staticClass: "text_center" }, [_vm._v("80")]),
              _c("td", { staticClass: "text_center" }, [
                _c("strong", { staticClass: "color_red" }, [_vm._v("-0,002")])
              ]),
              _c("td", { staticClass: "text_center" }, [_vm._v("Внутри дня")])
            ]),
            _c("tr", [
              _c("td", [_c("strong", [_vm._v("Лукойл")])]),
              _c("td", { staticClass: "text_center" }, [_vm._v("25 дек 2018")]),
              _c("td", { staticClass: "text_center" }, [_vm._v("120")]),
              _c("td", { staticClass: "text_center" }, [_vm._v("120")]),
              _c("td", { staticClass: "text_center" }, [_vm._v("130")]),
              _c("td", { staticClass: "text_center" }, [_vm._v("130")]),
              _c("td", { staticClass: "text_center" }, [_vm._v("80")]),
              _c("td", { staticClass: "text_center" }, [
                _c("strong", { staticClass: "color_green" }, [_vm._v("0,001")])
              ]),
              _c("td", { staticClass: "text_center" }, [_vm._v("Внутри дня")])
            ]),
            _c("tr", [
              _c("td", [_c("strong", [_vm._v("Лукойл")])]),
              _c("td", { staticClass: "text_center" }, [_vm._v("25 дек 2018")]),
              _c("td", { staticClass: "text_center" }, [_vm._v("120")]),
              _c("td", { staticClass: "text_center" }, [_vm._v("120")]),
              _c("td", { staticClass: "text_center" }, [_vm._v("130")]),
              _c("td", { staticClass: "text_center" }, [_vm._v("130")]),
              _c("td", { staticClass: "text_center" }, [_vm._v("80")]),
              _c("td", { staticClass: "text_center" }, [
                _c("strong", { staticClass: "color_red" }, [_vm._v("-0,002")])
              ]),
              _c("td", { staticClass: "text_center" }, [_vm._v("Внутри дня")])
            ]),
            _c("tr", [
              _c("td", [_c("strong", [_vm._v("Лукойл")])]),
              _c("td", { staticClass: "text_center" }, [_vm._v("25 дек 2018")]),
              _c("td", { staticClass: "text_center" }, [_vm._v("120")]),
              _c("td", { staticClass: "text_center" }, [_vm._v("120")]),
              _c("td", { staticClass: "text_center" }, [_vm._v("130")]),
              _c("td", { staticClass: "text_center" }, [_vm._v("130")]),
              _c("td", { staticClass: "text_center" }, [_vm._v("80")]),
              _c("td", { staticClass: "text_center" }, [
                _c("strong", { staticClass: "color_green" }, [_vm._v("0,001")])
              ]),
              _c("td", { staticClass: "text_center" }, [_vm._v("Внутри дня")])
            ])
          ])
        ])
      ]
    )
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "subscribe" }, [
      _c("div", { staticClass: "subscribe__wrap" }, [
        _c("div", { staticClass: "subscribe__title" }, [
          _vm._v("Оформите подписку Эксперт")
        ]),
        _c("div", { staticClass: "subscribe__text" }, [
          _vm._v(
            "и получите возможность сортировки и фильтрации данных всех таблиц, а также детальную информацию по каждому завершенному прогнозу всех аналитиков. "
          )
        ]),
        _c("a", { staticClass: "btn btn_green", attrs: { href: "#" } }, [
          _vm._v("Подписаться")
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "footer__top_logo" }, [
      _c("a", { staticClass: "footer__logo", attrs: { href: "#" } }, [
        _c("strong", [_vm._v("FIN")]),
        _c("span", [_vm._v("Prognoz")])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "footer__top_nav" }, [
      _c("div", { staticClass: "footer__title" }, [_vm._v("Информация")]),
      _c("ul", { staticClass: "footer__nav" }, [
        _c("li", [_c("a", { attrs: { href: "#" } }, [_vm._v("О нас")])]),
        _c("li", [
          _c("a", { attrs: { href: "#" } }, [_vm._v("О финансовых рынках")])
        ]),
        _c("li", [
          _c("a", { attrs: { href: "#" } }, [_vm._v("Условия пользования")])
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "footer__top_phones" }, [
      _c("div", { staticClass: "footer__title" }, [_vm._v("Контакты")]),
      _c("ul", { staticClass: "footer__phones" }, [
        _c("li", [
          _c("a", { attrs: { href: "tel:88001234567" } }, [
            _vm._v("8 800 1234567")
          ])
        ]),
        _c("li", [
          _c("a", { attrs: { href: "tel:+74951234567" } }, [
            _vm._v("+7 495 1234567")
          ])
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "footer__links_col" }, [
      _c("a", { staticClass: "btn btn_blue", attrs: { href: "#" } }, [
        _vm._v("Заказать звонок")
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "footer__bottom" }, [
      _c("div", { staticClass: "footer__bottom_col" }, [
        _c("span", [_vm._v("®FinPrognoz, 2019")])
      ]),
      _c("div", { staticClass: "footer__bottom_col" }, [
        _c("a", { attrs: { href: "#" } }, [
          _vm._v("Политика конфиденциальности")
        ])
      ]),
      _c("div", { staticClass: "footer__bottom_col" }, [
        _c("a", { attrs: { href: "#" } }, [_vm._v("Договор оферты")])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "cookies" }, [
      _c("div", { staticClass: "container" }, [
        _c("div", { staticClass: "cookies__wrap" }, [
          _c("span", { staticClass: "cookies__close" }),
          _c("div", { staticClass: "cookies__title" }, [
            _vm._v(
              "Пожалуйста, разрешите использование cookies для более эффективной работы с сайтом "
            )
          ]),
          _c("div", { staticClass: "cookies__text" }, [
            _vm._v(
              "Мы используем файлы cookie для того, чтобы предоставить Вам больше возможностей при использовании сайта. Файлы cookie представляют собой небольшие фрагменты данных, которые временно сохраняются на вашем компьютере или мобильном устройстве, и обеспечивают более эффективную работу сайта. "
            )
          ]),
          _c("ul", { staticClass: "btn_group" }, [
            _c("li", [
              _c(
                "a",
                {
                  staticClass: "btn btn_white btn_shadow",
                  attrs: { href: "#" }
                },
                [_vm._v("Разрешить")]
              )
            ]),
            _c("li", [
              _c(
                "a",
                { staticClass: "btn btn_white_border", attrs: { href: "#" } },
                [_vm._v("Запретить")]
              )
            ])
          ])
        ])
      ])
    ])
  }
]
render._withStripped = true

export { render, staticRenderFns }"}]}